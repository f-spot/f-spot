// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class InitableAdapter : GLib.GInterfaceAdapter, GLib.Initable {

		static InitableIface iface;

		struct InitableIface {
			public IntPtr gtype;
			public IntPtr itype;

			public InitDelegate init;
		}

		static InitableAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(InitableAdapter));
			iface.init = new InitDelegate (InitCallback);
		}


		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool InitDelegate (IntPtr initable, IntPtr cancellable, out IntPtr error);

		static bool InitCallback (IntPtr initable, IntPtr cancellable, out IntPtr error)
		{
			error = IntPtr.Zero;

			try {
				GLib.InitableImplementor __obj = GLib.Object.GetObject (initable, false) as GLib.InitableImplementor;
				bool __result = __obj.Init (GLib.Object.GetObject(cancellable) as GLib.Cancellable);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			InitableIface native_iface = (InitableIface) Marshal.PtrToStructure (ifaceptr, typeof (InitableIface));
			native_iface.init = iface.init;
			Marshal.StructureToPtr (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public InitableAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		InitableImplementor implementor;

		public InitableAdapter (InitableImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			this.implementor = implementor;
		}

		public InitableAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_initable_get_type();

		private static GLib.GType _gtype = new GLib.GType (g_initable_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static Initable GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static Initable GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is InitableImplementor)
				return new InitableAdapter (obj as InitableImplementor);
			else if (obj as Initable == null)
				return new InitableAdapter (obj.Handle);
			else
				return obj as Initable;
		}

		public InitableImplementor Implementor {
			get {
				return implementor;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern bool g_initable_init(IntPtr raw, IntPtr cancellable, out IntPtr error);

		public bool Init(GLib.Cancellable cancellable) {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = g_initable_init(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

#endregion
	}
}
