// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class MountOperation : GLib.Object {

		[Obsolete]
		protected MountOperation(GLib.GType gtype) : base(gtype) {}
		public MountOperation(IntPtr raw) : base(raw) {}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_mount_operation_new();

		public MountOperation () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (MountOperation)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = g_mount_operation_new();
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_mount_operation_get_password(IntPtr raw);

		[DllImport("libgio-2.0-0.dll")]
		static extern void g_mount_operation_set_password(IntPtr raw, IntPtr password);

		[GLib.Property ("password")]
		public string Password {
			get  {
				IntPtr raw_ret = g_mount_operation_get_password(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				g_mount_operation_set_password(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_mount_operation_get_username(IntPtr raw);

		[DllImport("libgio-2.0-0.dll")]
		static extern void g_mount_operation_set_username(IntPtr raw, IntPtr username);

		[GLib.Property ("username")]
		public string Username {
			get  {
				IntPtr raw_ret = g_mount_operation_get_username(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				g_mount_operation_set_username(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_mount_operation_get_domain(IntPtr raw);

		[DllImport("libgio-2.0-0.dll")]
		static extern void g_mount_operation_set_domain(IntPtr raw, IntPtr domain);

		[GLib.Property ("domain")]
		public string Domain {
			get  {
				IntPtr raw_ret = g_mount_operation_get_domain(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				g_mount_operation_set_domain(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern int g_mount_operation_get_password_save(IntPtr raw);

		[DllImport("libgio-2.0-0.dll")]
		static extern void g_mount_operation_set_password_save(IntPtr raw, int save);

		[GLib.Property ("password-save")]
		public GLib.PasswordSave PasswordSave {
			get  {
				int raw_ret = g_mount_operation_get_password_save(Handle);
				GLib.PasswordSave ret = (GLib.PasswordSave) raw_ret;
				return ret;
			}
			set  {
				g_mount_operation_set_password_save(Handle, (int) value);
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern int g_mount_operation_get_choice(IntPtr raw);

		[DllImport("libgio-2.0-0.dll")]
		static extern void g_mount_operation_set_choice(IntPtr raw, int choice);

		[GLib.Property ("choice")]
		public int Choice {
			get  {
				int raw_ret = g_mount_operation_get_choice(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				g_mount_operation_set_choice(Handle, value);
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern bool g_mount_operation_get_anonymous(IntPtr raw);

		[DllImport("libgio-2.0-0.dll")]
		static extern void g_mount_operation_set_anonymous(IntPtr raw, bool anonymous);

		[GLib.Property ("anonymous")]
		public bool Anonymous {
			get  {
				bool raw_ret = g_mount_operation_get_anonymous(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				g_mount_operation_set_anonymous(Handle, value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void AbortedVMDelegate (IntPtr op);

		static AbortedVMDelegate AbortedVMCallback;

		static void aborted_cb (IntPtr op)
		{
			try {
				MountOperation op_managed = GLib.Object.GetObject (op, false) as MountOperation;
				op_managed.OnAborted ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideAborted (GLib.GType gtype)
		{
			if (AbortedVMCallback == null)
				AbortedVMCallback = new AbortedVMDelegate (aborted_cb);
			OverrideVirtualMethod (gtype, "aborted", AbortedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.MountOperation), ConnectionMethod="OverrideAborted")]
		protected virtual void OnAborted ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("aborted")]
		public event System.EventHandler Aborted {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "aborted");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "aborted");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ReplyVMDelegate (IntPtr op, int result);

		static ReplyVMDelegate ReplyVMCallback;

		static void reply_cb (IntPtr op, int result)
		{
			try {
				MountOperation op_managed = GLib.Object.GetObject (op, false) as MountOperation;
				op_managed.OnReply ((GLib.MountOperationResult) result);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideReply (GLib.GType gtype)
		{
			if (ReplyVMCallback == null)
				ReplyVMCallback = new ReplyVMDelegate (reply_cb);
			OverrideVirtualMethod (gtype, "reply", ReplyVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.MountOperation), ConnectionMethod="OverrideReply")]
		protected virtual void OnReply (GLib.MountOperationResult result)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (result);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("reply")]
		public event GLib.ReplyHandler Reply {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "reply", typeof (GLib.ReplyArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "reply", typeof (GLib.ReplyArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void AskPasswordVMDelegate (IntPtr op, IntPtr message, IntPtr default_user, IntPtr default_domain, int flags);

		static AskPasswordVMDelegate AskPasswordVMCallback;

		static void askpassword_cb (IntPtr op, IntPtr message, IntPtr default_user, IntPtr default_domain, int flags)
		{
			try {
				MountOperation op_managed = GLib.Object.GetObject (op, false) as MountOperation;
				op_managed.OnAskPassword (GLib.Marshaller.Utf8PtrToString (message), GLib.Marshaller.Utf8PtrToString (default_user), GLib.Marshaller.Utf8PtrToString (default_domain), (GLib.AskPasswordFlags) flags);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideAskPassword (GLib.GType gtype)
		{
			if (AskPasswordVMCallback == null)
				AskPasswordVMCallback = new AskPasswordVMDelegate (askpassword_cb);
			OverrideVirtualMethod (gtype, "ask-password", AskPasswordVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.MountOperation), ConnectionMethod="OverrideAskPassword")]
		protected virtual void OnAskPassword (string message, string default_user, string default_domain, GLib.AskPasswordFlags flags)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (5);
			GLib.Value[] vals = new GLib.Value [5];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (message);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (default_user);
			inst_and_params.Append (vals [2]);
			vals [3] = new GLib.Value (default_domain);
			inst_and_params.Append (vals [3]);
			vals [4] = new GLib.Value (flags);
			inst_and_params.Append (vals [4]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("ask-password")]
		public event GLib.AskPasswordHandler AskPassword {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "ask-password", typeof (GLib.AskPasswordArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "ask-password", typeof (GLib.AskPasswordArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void AskQuestionVMDelegate (IntPtr op, IntPtr message, IntPtr[] choices);

		static AskQuestionVMDelegate AskQuestionVMCallback;

		static void askquestion_cb (IntPtr op, IntPtr message, IntPtr[] choices)
		{
			try {
				MountOperation op_managed = GLib.Object.GetObject (op, false) as MountOperation;
				op_managed.OnAskQuestion (GLib.Marshaller.Utf8PtrToString (message), GLib.Marshaller.Utf8PtrToString (choices));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideAskQuestion (GLib.GType gtype)
		{
			if (AskQuestionVMCallback == null)
				AskQuestionVMCallback = new AskQuestionVMDelegate (askquestion_cb);
			OverrideVirtualMethod (gtype, "ask-question", AskQuestionVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.MountOperation), ConnectionMethod="OverrideAskQuestion")]
		protected virtual void OnAskQuestion (string message, string[] choices)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (3);
			GLib.Value[] vals = new GLib.Value [3];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (message);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (choices);
			inst_and_params.Append (vals [2]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("ask-question")]
		public event GLib.AskQuestionHandler AskQuestion {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "ask-question", typeof (GLib.AskQuestionArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "ask-question", typeof (GLib.AskQuestionArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ShowProcessesVMDelegate (IntPtr op, IntPtr message, IntPtr processes, IntPtr[] choices);

		static ShowProcessesVMDelegate ShowProcessesVMCallback;

		static void showprocesses_cb (IntPtr op, IntPtr message, IntPtr processes, IntPtr[] choices)
		{
			try {
				MountOperation op_managed = GLib.Object.GetObject (op, false) as MountOperation;
				op_managed.OnShowProcesses (GLib.Marshaller.Utf8PtrToString (message), processes, GLib.Marshaller.Utf8PtrToString (choices));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideShowProcesses (GLib.GType gtype)
		{
			if (ShowProcessesVMCallback == null)
				ShowProcessesVMCallback = new ShowProcessesVMDelegate (showprocesses_cb);
			OverrideVirtualMethod (gtype, "show-processes", ShowProcessesVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(GLib.MountOperation), ConnectionMethod="OverrideShowProcesses")]
		protected virtual void OnShowProcesses (string message, IntPtr processes, string[] choices)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (4);
			GLib.Value[] vals = new GLib.Value [4];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (message);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (processes);
			inst_and_params.Append (vals [2]);
			vals [3] = new GLib.Value (choices);
			inst_and_params.Append (vals [3]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("show-processes")]
		public event GLib.ShowProcessesHandler ShowProcesses {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "show-processes", typeof (GLib.ShowProcessesArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "show-processes", typeof (GLib.ShowProcessesArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern void g_mount_operation_reply(IntPtr raw, int result);

		public void EmitReply(GLib.MountOperationResult result) {
			g_mount_operation_reply(Handle, (int) result);
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_mount_operation_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = g_mount_operation_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
