// <auto-generated />
using System;
using FSpot.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FSpot.Migrations
{
    [DbContext(typeof(FSpotContext))]
    partial class FSpotContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3");

            modelBuilder.Entity("FSpot.Models.Export", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExportToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExportType")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("TEXT");

                    b.Property<long>("ImageVersionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Exports");
                });

            modelBuilder.Entity("FSpot.Models.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("JobOptions")
                        .HasColumnType("TEXT");

                    b.Property<long>("JobPriority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobType")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RunAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("FSpot.Models.Meta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Meta");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9fbb58ab-1b6e-4f0a-a05e-dadd88228889"),
                            Data = "0.9.0",
                            Name = "F-Spot Version"
                        },
                        new
                        {
                            Id = new Guid("d1094b91-f73e-4a04-832f-d6952d11e314"),
                            Data = "8d8c0f4d-2fe4-4627-ac9a-7c273004b3b5",
                            Name = "Hidden Tag Id"
                        });
                });

            modelBuilder.Entity("FSpot.Models.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BaseUri")
                        .HasColumnType("TEXT");

                    b.Property<long>("DefaultVersionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filename")
                        .HasColumnType("TEXT");

                    b.Property<long>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("RollId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UtcTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RollId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("FSpot.Models.PhotoTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PhotoId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TagId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.HasIndex("TagId");

                    b.ToTable("PhotoTags");
                });

            modelBuilder.Entity("FSpot.Models.PhotoVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BaseUri")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filename")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImportMd5")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PhotoId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Protected")
                        .HasColumnType("INTEGER");

                    b.Property<long>("VersionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.ToTable("PhotoVersions");
                });

            modelBuilder.Entity("FSpot.Models.Roll", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UtcTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Rolls");
                });

            modelBuilder.Entity("FSpot.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCategory")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PhotoId")
                        .HasColumnType("TEXT");

                    b.Property<long>("SortPriority")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PhotoId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("920caad8-6480-4d8c-9e0a-468c94e777c1"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Icon = "emblem-favorite",
                            IsCategory = true,
                            Name = "Favorites",
                            SortPriority = -10L
                        },
                        new
                        {
                            Id = new Guid("8d8c0f4d-2fe4-4627-ac9a-7c273004b3b5"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Icon = "emblem-readonly",
                            IsCategory = false,
                            Name = "Hidden",
                            SortPriority = -9L
                        },
                        new
                        {
                            Id = new Guid("d67b6807-f635-4e6b-a98a-8a9f18966647"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Icon = "emblem-people",
                            IsCategory = true,
                            Name = "People",
                            SortPriority = -8L
                        },
                        new
                        {
                            Id = new Guid("83128847-fd1e-4a5b-9294-3977a031f4f1"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Icon = "emblem-places",
                            IsCategory = true,
                            Name = "Places",
                            SortPriority = -7L
                        },
                        new
                        {
                            Id = new Guid("da4b6643-50c4-4721-908d-ed2fe09feade"),
                            CategoryId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Icon = "emblem-event",
                            IsCategory = true,
                            Name = "Events",
                            SortPriority = -6L
                        });
                });

            modelBuilder.Entity("FSpot.Models.Photo", b =>
                {
                    b.HasOne("FSpot.Models.Roll", "Roll")
                        .WithMany("Photos")
                        .HasForeignKey("RollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FSpot.Models.PhotoTag", b =>
                {
                    b.HasOne("FSpot.Models.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FSpot.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FSpot.Models.PhotoVersion", b =>
                {
                    b.HasOne("FSpot.Models.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FSpot.Models.Tag", b =>
                {
                    b.HasOne("FSpot.Models.Photo", null)
                        .WithMany("Tags")
                        .HasForeignKey("PhotoId");
                });
#pragma warning restore 612, 618
        }
    }
}
